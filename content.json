{"pages":[{"title":"分類","text":"","link":"/categories/index.html"}],"posts":[{"title":"簡易 AWS 服務使用指南(1) - IAM、S3","text":"前言Amazon Web Services (AWS) 作為雲端服務應用的平台，除了提供我們資料儲存、運算的功能外，也有其他各式各樣的應用讓我們來使用，例如: 生成靜態網頁、發送訊息和自動化程式等。此外，人工智慧的相關服務: 影像辨識、語意分析、文字翻譯，可以讓無經驗的使用者們快速上手而無需具備機械學習相關的專業知識。以上這些服務不僅是能各自單獨使用，也能互相搭配來應付複雜的需求，進而建立起一個有彈性且靈活的功能模組。 以下系列文將透過 Python Boto3 套件連結 AWS，並運用 IAM、S3、SNS、Comprehend 與 Rekognition 的雲端服務進行使用者管理、檔案操作、訊息寄送、影像偵測和自然語言處理等任務。  使用 Boto3 套件連結 AWSBoto3 是 Python 的套件之一，我們可以用它初始化 client 端，只要輸入使用的服務名稱、region_name、aws_access_key_id 和 aws_secret_access_key 便可連結上 AWS。 12345import boto3s3 = boto3.client(&apos;s3&apos;,  region_name=&apos;us-east-1&apos;,  aws_access_key_id=AWS_KEY_ID,  aws_secret_access_key=AWS_SECRET) 以上的範例中，使用的服務 Simple Storage Service (S3) 代表物件儲存服務，用來存放各種資料。 region_name 為 AWS 的服務端點名稱，各個區域的名稱有相對應的代碼，例如代碼 us-east-1 代表美國東部(維吉尼亞北部)。詳細的對應表可查詢這裡。而 AWS_KEY_ID 與 AWS_SECRET 為 AWS 存取金鑰的 ID 和密碼，使用者必須擁有這一組資訊才能享用 AWS 服務和資源的存取權。 在說明如何使用 S3 服務前，我們先來看看怎麼在 AWS 管理使用者以及發配給使用者一組 aws_access_key_id 與 aws_secret_access_key。 首先，註冊 AWS 並登入 AWS Management Console 的頁面。我們需要使用 IAM 服務來管理使用者。IAM 全名為 AWS Identity and Access Management，主要是用來建立、管理 AWS 的使用者和賦予使用者存取資源的權限。在主控台會有一個 Find Services 的搜尋框，裡面輸入 IAM 來建立使用者。流程如下: 在 Users 頁面點擊 Add user 輸入使用者名稱: User name 選擇 AWS 的存取型態: Programmatic access 賦予使用者一組 access_key_id 和 secret_access_key，使用者必須使用它才可以存取 AWS 資源; AWS Management Console access 則是讓所有使用者用一個密碼登入主控台，相較於前者有比較大的權限。目前先勾選前者。 設定 Permission: 選擇 Attach existing policies directly 並輸入特定服務的 Policy。例如我們要讓使用者有 S3 服務的存取權，可輸入 AmazonS3FullAccess。 完成之後，使用者便會有一組 access_key_id 和 secret_access_key。   用 S3 進行檔案處理有了上述的設定後，現在將話題轉回到 S3。S3 作為雲端儲存的服務，我們可以上傳任何的檔案到 S3，並且藉著 URL 將檔案下載到本地端。從資料流的觀點上來看，雲端儲存扮演一個重要的角色。無論是在資料管線(data pipeline)的結點或端點，它可當作資料暫時存放的地方。 以 S3 為例，許多的 AWS 服務便是用放在 S3 的資料做後續的處理以及應用。 S3 的組成要素中主要有兩項東西: Bucket 和 Object。用資料夾與檔案的關係來比喻的話，Bucket 類似資料夾的功能，用來存放各種不同的檔案(如: 影像、影音、CSV 檔、log 檔…); Object 則類似那些檔案，被放入資料夾中。此外，Bucket 在 S3 中還有其他不同的功用，例如: 擁有自己的權限制定策略(bucket policy)、可以充當靜態網站的資料夾、產生自身活動的日誌(log)並放入到其他的 Bucket 等操作。下表列出了 Bucket 和 Object 之間的一些差異: Bucket Object 名稱 Bucket 的名稱稱為 name Object 的名稱稱為 key 型態 name 是一個字串 key 是 Bucket 底下的的路徑 唯一性(Unique) 有唯一的 name 有唯一的 key 數量 一個 Bucket 可以包含許多 Object 一個 Object 只在一個 Bucket 裡   初步認識 Bucket 和 Object 的概念後，我們來實際操作它們。 Bucket 主要有三個操作: 建立 Bucket、列出帳戶中所有的 Bucket 和刪除 Bucket。以下將各別列出: 建立 Bucket 1bucket_response = s3.create_bucket(Bucket=&apos;Weather&apos;) 列出所有的 Bucket 12345678bucket_response = s3.list_buckets()# 取出 Bucket 字典(裡面含有 Bucket 的名稱及其所建立的時間)bucket_lists = bucket_response[&apos;Buckets&apos;]# 取出所有 Bucket 的名稱for bucket in bucket_response[&apos;Buckets&apos;]: print(bucket[&apos;Name&apos;]) 刪除 Bucket 1bucket_response = s3.delete_bucket(&apos;Weather&apos;) 其中，參數 Weather 為 Bucket 的名稱。我們可以在 AWS S3 Buckets 的主控台查看已建立好的 Bucket 。 接下來換 Object 的操作。這一部份包含上傳檔案、下載檔案、取出 Bucket 裡面的 Object 和刪除 Object。這裡要注意的的是: 上傳與下載檔案的時候，除了輸入要存放檔案的 Bucket 名稱，檔案名稱 Filename 和 Object 的名稱 key 也要輸入。另外，取出 Bucket 裡面的 Object 時，可以藉由不同的參數設定取出特定的 Object。MaxKeys=2 表示只取出前兩個 Object ，沒有設定參數的話，預設值是 1000 個; Prefix 則是取出有特定字首名稱的 Object 。 上傳檔案 123s3.upload_file(Filename=&apos;Weather_2020_01_01.csv&apos;, Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;) 下載檔案 123s3.download_file(Filename=&apos;Weather_download.csv&apos;, Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;) 取出 Bucket 裡面的 Object 12345678910111213141516# 取出 Bucket 裡面特定的 Object# response 是一個 Content dictionaryresponse = s3.list_objects(Bucket=&apos;Weather&apos;, MaxKeys=2, Prefix=&apos;Weather_2020_&apos;)# 取出 Bucket 裡面的第一個 Object# response 內含 object metadataresponse = s3.head_object(Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;)# 使用 .get_object() 的方法，資料以 StreamingBody 的 response 型態儲存在字典 body 裡response = s3.get_object(Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;)# 讀取 StreamingBody 到 Pandaspd.read_csv(response[&apos;Body&apos;]) 刪除 Object 12s3.delete_object(Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;) 以上就是 Bucket 和 Object 的基本操作。但你可能會想到: 要怎麼樣把一份檔案公開給任何人使用，且使用檔案的人不須擁有 S3 服務的存取權限 ? 因為上傳檔案後，只有在 S3 服務裡的使用者享有 IAM AmazonS3FullAccess 提供的存取權(前文的設定)，非 IAM 所建立的使用者無法使用檔案。嗯，該是進一步深入了解 AWS permission system 的時候了!  檔案的權限設定一般而言，我們通常會把私密的資料僅供特定的使用者使用。想要資料的其他使用者，必須從帳戶管理者拿到密碼才能存取資料。用 pandas 直接下載 S3 的檔案為例， 12df = pd.read_csv(&apos;https://Weather.s3.amazonaws.com/Weather_2020_01_01.csv&apos;)df 你會看到下列的輸出: 1HTTPError: HTTP Error 403: Forbidden 這應該在你預期地狀況內。沒錯，我們需要如同先前的操作，下載檔案前先啟動 client 端，輸入帳戶管理者給使用者的 access_key_id 和 secret_access_key 才能下載檔案。這就是 AWS permission system 預設的否認允許(denying permission)。資料是私密的(private)，直接用檔案的 URL 下載會被禁止。因此，你必須要有 access_key_id 和 secret_access_key，對檔案才有存取權。這樣的運作方式提供了資料一層的保護。 AWS permission system 有四種控制使用者權限的方法，從資料的範圍大到小分別為 IAM、Bucket Policy、Access Control Lists (ACL) 和 Presigned URL。前面提過的 IAM 會給予使用者特定服務的使用權; Bucket Policy 則給予使用者 Bucket 及其 Object 的存取權; Access Control Lists (ACL) 會針對 Bucket 裡面特定的 Object 設定權限。ACL 分成兩種模式: private 和 public-read。private是 ACL 的預設模式。在 private 模式時，一般人無 Object 的存取權。要使用 Object 須透過 IAM 提供的 access_key_id 和 secret_access_key 。然而，在 public-read 模式下，任何人都可以使用 Object 。 我們再用一次下載 S3 的檔案當作範例: 初始化 client 端後，上傳檔案 12345678910import boto3s3 = boto3.client(&apos;s3&apos;, region_name=&apos;us-east-1&apos;, aws_access_key_id=AWS_KEY_ID, aws_secret_access_key=AWS_SECRET)s3.upload_file(Filename=&apos;Weather_2020_01_01.csv&apos;, Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;) 將 Object 的 ACL 設定為 public-read 123s3.put_object_acl(Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;, ACL=&apos;public-read&apos;) 另外，你也可以在上傳檔案時直接設定 ACL 為 public-read: 1234s3.upload_file(Bucket=&apos;Weather&apos;, Filename=&apos;Weather_2020_01_01.csv&apos;, Key=&apos;Weather_2020_01_01.csv&apos;, ExtraArgs={&apos;ACL&apos;:&apos;public-read&apos;}) 完成後，Object 變成 public-read ，這樣一來便可直接用 Object 的 URL 成功讀取檔案。順帶一提，Object 的 URL 格式為 https://{bucket}.s3.amazonaws.com/{key} 。 123url = &quot;https://{}.s3.amazonaws.com/{}&quot;.format(&quot;Weather&quot;, &quot;Weather_2020_01_01.csv&quot;)df = pd.read_csv(url) # access! 有了 ACL 的權限設定方法，就可以回答上面提到的問題: 如何把一份檔案公開給任何人使用，且使用檔案的人不須擁有 S3 服務的存取權限 ? 我們只要透過一個參數設定的步驟就行了 ! 如此一來，若要給一般人下載檔案，將 Object 保持 public-read 的狀態即可。 Object 參數為 private 或沒有設定，就是遵守 AWS permission system 預設的否認允許(denying permission)，使用檔案要經過 IAM 規範提供的 access_key_id 和 secret_access_key。 所以，權限檢查大致的流程如下: $$ 檔案請求者(requester)\\ \\rightarrow ACL\\ 的規範是否允許 ? $$ 是 $\\rightarrow$ 下載 否 $\\rightarrow$ 禁止下載，檢查 AWS permission system 的其他規範是否允許(IAM、bucket policy)? 大功告成 ! 等等，還有一種要考慮的情況。 如果我們想讓 Object 一直維持 private ，要下載檔案時 Object 變成有時效性的 public-read ， 過了這段時效再變回 private 。 換句話說，有沒有辦法在一段時間間隔裡，任何人都可以隨意的下載檔案，時間過了就無法使用 ? 有，那就是上面提到 AWS permission system 的最後一個方法: Presigned URL。 Presigned URL 提供我們一個私密資料的連結，這個連結會在限定的時間內有效。 用這種方式可以彈性地確保資料的隱密性。 來看看一樣下載檔案的流程，要如何使用 Presigned URL 吧 ! 初始化 client 端後，上傳檔案 12345678910import boto3s3 = boto3.client(&apos;s3&apos;, region_name=&apos;us-east-1&apos;, aws_access_key_id=AWS_KEY_ID, aws_secret_access_key=AWS_SECRET)s3.upload_file(Filename=&apos;Weather_2020_01_01.csv&apos;, Bucket=&apos;Weather&apos;, Key=&apos;Weather_2020_01_01.csv&apos;) 生成 Presigned URL (參數 ExpiresIn 用來設定時間間隔的長度，以秒為單位) 1234share_url = s3.generate_presigned_url(ClientMethod=&apos;get_object&apos;, ExpiresIn=3600, Params={&apos;Bucket&apos;: &apos;Weather&apos;, &apos;Key&apos;: &apos;Weather_2020_01_01.csv&apos;}) 如此一來，任何人都可以在有效的時間內，透過共享的連結 share_url 讀取檔案內容。 1pd.read_csv(share_url) 權限檢查流程方面，加入 Presigned URL 後變成: $$ 檔案請求者(requester)先檢查有沒有\\ Presigned\\ URL ?$$ 有 $\\rightarrow$ 有效期限內下載檔案 沒有 $\\rightarrow$ ACL 的規範為 public 或 private ? public-read $\\rightarrow$ 下載檔案 private $\\rightarrow$ 禁止下載，檢查 AWS permission system 的其他規範是否允許(IAM、bucket policy)? 最後，我們用下表將上述 AWS permission system 中的 IAM、Bucket Policy、Access Control Lists (ACL) 和 Presigned URL 做整理，以便更清楚地瞭解各個規範方法的權限控制範圍。 方法 權限範圍 IAM AWS services, buckets 和 objects Bucket policy buckets 和 objects Access Control Lists (ACL) objects Presigned URL 臨時存取 objects   小結在本篇文章結束前，讓我們回顧一下前文，列舉以下幾個的要點。 相信您已經對 AWS S3 的基礎有所了解。 AWS 是一個雲端應用平台，它提供了許多相關的服務，如: S3、SNS、Comprehend、Rekognition、RDS、Lambda、EC2… 我們可透過 Python 的 boto3 套件連結 AWS 的服務並從 AWS 的主控台利用 IAM 建立、管理使用者。 AWS S3 雲端儲存的組成要件為 bucket 和 object， 我們可以利用它們進行檔案的上傳與下載。 AWS permission system 包含 IAM、Bucket Policy、Access Control Lists (ACL) 和 Presigned URL， 它規範了使用者使用 AWS 各種服務的權限。 下一回，我們將認識另一個 AWS 服務 - SNS，它是一個專門用來從雲端發送簡訊的系統。","link":"/2020/06/30/AWS/"}],"tags":[{"name":"data engineering","slug":"data-engineering","link":"/tags/data-engineering/"},{"name":"cloud technology","slug":"cloud-technology","link":"/tags/cloud-technology/"},{"name":"Amazon S3","slug":"Amazon-S3","link":"/tags/Amazon-S3/"}],"categories":[{"name":"Data engineering","slug":"Data-engineering","link":"/categories/Data-engineering/"}]}